
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return userDoc.exists && userDoc.data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null && 
                    (request.auth.uid == userId || isAdmin(request.auth.uid));
      
      allow create: if request.auth != null && 
                      request.auth.uid == userId && // User can only create their own profile
                      request.resource.data.uid == request.auth.uid && // uid in doc must match auth uid
                      request.resource.data.email == request.auth.token.email && // email in doc must match auth email
                      request.resource.data.role == 'user' && // New users must have 'user' role
                      request.resource.data.containsKey('createdAt'); // Ensure createdAt field is present
                      // No other fields should be writable by user on create except those explicitly allowed/checked here
      
      allow update: if request.auth != null && 
                      ( (request.auth.uid == userId && 
                         request.resource.data.role == resource.data.role && // User cannot change their own role
                         request.resource.data.uid == resource.data.uid && // uid cannot be changed
                         request.resource.data.email == resource.data.email && // email cannot be changed by user this way
                         request.resource.data.createdAt == resource.data.createdAt // createdAt cannot be changed
                         // Allow other fields like displayName to be updated by user
                        ) || 
                        isAdmin(request.auth.uid) // Admin can update any field, including role
                      ); 
    }

    match /invoices/{invoiceId} {
      allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid; // User ID in invoice must match creator's UID
                       // Add other necessary field validations for invoice creation here

      // User can read their own invoices, admin can read any invoice
      allow get, list: if request.auth != null && 
                         (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));
      
      // User can update/delete their own invoices, admin can update/delete any invoice
      allow update, delete: if request.auth != null && 
                              (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));
    }
  }
}
